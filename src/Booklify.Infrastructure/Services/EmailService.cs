using MailKit.Net.Smtp;
using MailKit.Security;
using MimeKit;
using Microsoft.Extensions.Options;
using Microsoft.Extensions.Logging;
using Booklify.Application.Common.Interfaces;
using Booklify.Application.Common.Models;
using Booklify.Infrastructure.Models;

namespace Booklify.Infrastructure.Services;

/// <summary>
/// Email service implementation using MailKit
/// </summary>
public class EmailService : IEmailService
{
    private readonly EmailSettings _emailSettings;
    private readonly ILogger<EmailService> _logger;

    public EmailService(
        IOptions<EmailSettings> emailSettings,
        ILogger<EmailService> logger)
    {
        _emailSettings = emailSettings.Value;
        _logger = logger;
    }

    /// <summary>
    /// Send a generic email
    /// </summary>
    public async Task<Result> SendEmailAsync(string toEmail, string subject, string htmlContent)
    {
        try
        {
            if (string.IsNullOrEmpty(toEmail) || !IsValidEmail(toEmail))
            {
                return Result.Failure("Invalid email address", ErrorCode.InvalidInput);
            }

            var message = new MimeMessage();
            message.From.Add(new MailboxAddress(_emailSettings.FromName, _emailSettings.FromEmail));
            message.To.Add(new MailboxAddress("", toEmail));
            message.Subject = subject;

            var bodyBuilder = new BodyBuilder
            {
                HtmlBody = htmlContent
            };
            message.Body = bodyBuilder.ToMessageBody();

            using var client = new SmtpClient();
            
            // K·∫øt n·ªëi ƒë·∫øn SMTP server v·ªõi ƒë√∫ng SecureSocketOptions
            SecureSocketOptions secureOptions;
            if (_emailSettings.Port == 465)
            {
                // Port 465 d√πng SSL/TLS ngay t·ª´ ƒë·∫ßu
                secureOptions = SecureSocketOptions.SslOnConnect;
            }
            else if (_emailSettings.Port == 587)
            {
                // Port 587 d√πng STARTTLS (b·∫Øt ƒë·∫ßu plain text r·ªìi upgrade to TLS)
                secureOptions = SecureSocketOptions.StartTls;
            }
            else
            {
                // Fallback to auto-detect
                secureOptions = _emailSettings.UseSsl ? SecureSocketOptions.StartTls : SecureSocketOptions.None;
            }
            
            await client.ConnectAsync(_emailSettings.Host, _emailSettings.Port, secureOptions);
            
            // X√°c th·ª±c
            if (!string.IsNullOrEmpty(_emailSettings.Username) && !string.IsNullOrEmpty(_emailSettings.Password))
            {
                await client.AuthenticateAsync(_emailSettings.Username, _emailSettings.Password);
            }

            // G·ª≠i email
            await client.SendAsync(message);
            await client.DisconnectAsync(true);

            _logger.LogInformation("Email sent successfully to {Email} with subject '{Subject}'", toEmail, subject);
            return Result.Success("Email sent successfully");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Exception occurred while sending email to {Email}", toEmail);
            return Result.Failure($"Email sending failed: {ex.Message}", ErrorCode.EmailSendFailed);
        }
    }

    /// <summary>
    /// Send email verification email
    /// </summary>
    public async Task<Result> SendEmailVerificationAsync(string toEmail, string verificationLink)
    {
        var subject = "X√°c th·ª±c t√†i kho·∫£n Booklify";
        var htmlContent = GetEmailVerificationTemplate(verificationLink);

        return await SendEmailAsync(toEmail, subject, htmlContent);
    }

    /// <summary>
    /// Send password reset email
    /// </summary>
    public async Task<Result> SendPasswordResetAsync(string toEmail, string resetLink)
    {
        var subject = "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u Booklify";
        var htmlContent = GetPasswordResetTemplate(resetLink);

        return await SendEmailAsync(toEmail, subject, htmlContent);
    }

    /// <summary>
    /// Send welcome email after successful registration
    /// </summary>
    public async Task<Result> SendWelcomeEmailAsync(string toEmail, string userName)
    {
        var subject = "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Booklify!";
        var htmlContent = GetWelcomeEmailTemplate(userName);

        return await SendEmailAsync(toEmail, subject, htmlContent);
    }

    #region Private Helper Methods

    /// <summary>
    /// Get email verification template
    /// </summary>
    private string GetEmailVerificationTemplate(string verificationLink)
    {
        return $@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset='utf-8'>
                <title>X√°c th·ª±c t√†i kho·∫£n Booklify</title>
            </head>
            <body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>
                <div style='text-align: center; margin-bottom: 30px;'>
                    <h1 style='color: #007bff;'>üìö Booklify</h1>
                </div>
                
                <div style='background-color: #f8f9fa; padding: 30px; border-radius: 10px;'>
                    <h2>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</h2>
                    <p>Ch√†o b·∫°n,</p>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n Booklify! Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n.</p>
                    
                    <div style='text-align: center; margin: 30px 0;'>
                        <a href='{verificationLink}' 
                           style='background-color: #007bff; color: white; padding: 15px 30px; 
                                  text-decoration: none; border-radius: 5px; display: inline-block;'>
                            ‚úÖ X√°c th·ª±c t√†i kho·∫£n
                        </a>
                    </div>
                    
                    <p style='color: #666; font-size: 14px;'>
                        Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.
                    </p>
                </div>
                
                <div style='text-align: center; margin-top: 30px;'>
                    <p style='color: #999; font-size: 12px;'>
                        ¬© 2024 Booklify. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
                    </p>
                </div>
            </body>
            </html>";
    }

    /// <summary>
    /// Get password reset template
    /// </summary>
    private string GetPasswordResetTemplate(string resetLink)
    {
        return $@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset='utf-8'>
                <title>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u Booklify</title>
            </head>
            <body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>
                <div style='text-align: center; margin-bottom: 30px;'>
                    <h1 style='color: #007bff;'>üìö Booklify</h1>
                </div>
                
                <div style='background-color: #f8f9fa; padding: 30px; border-radius: 10px;'>
                    <h2>üîí ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
                    <p>Ch√†o b·∫°n,</p>
                    <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Booklify. Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ti·∫øp t·ª•c.</p>
                    
                    <div style='text-align: center; margin: 30px 0;'>
                        <a href='{resetLink}' 
                           style='background-color: #dc3545; color: white; padding: 15px 30px; 
                                  text-decoration: none; border-radius: 5px; display: inline-block;'>
                            üîë ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
                        </a>
                    </div>
                    
                    <p style='color: #666; font-size: 14px;'>
                        N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.
                    </p>
                </div>
            </body>
            </html>";
    }

    /// <summary>
    /// Get welcome email template
    /// </summary>
    private string GetWelcomeEmailTemplate(string userName)
    {
        return $@"
            <!DOCTYPE html>
            <html>
            <head>
                <meta charset='utf-8'>
                <title>Ch√†o m·ª´ng ƒë·∫øn v·ªõi Booklify</title>
            </head>
            <body style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;'>
                <div style='text-align: center; margin-bottom: 30px;'>
                    <h1 style='color: #007bff;'>üìö Booklify</h1>
                </div>
                
                <div style='background-color: #d4edda; padding: 30px; border-radius: 10px;'>
                    <h2>üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi Booklify!</h2>
                    <p>Xin ch√†o {userName},</p>
                    <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi c·ªông ƒë·ªìng ƒë·ªçc s√°ch Booklify.</p>
                    
                    <div style='margin: 30px 0;'>
                        <h3>Nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m v·ªõi Booklify:</h3>
                        <ul style='text-align: left; color: #333;'>
                            <li>üìñ ƒê·ªçc h√†ng ng√†n cu·ªën s√°ch ch·∫•t l∆∞·ª£ng</li>
                            <li>üîñ L∆∞u s√°ch y√™u th√≠ch v√† ti·∫øp t·ª•c ƒë·ªçc sau</li>
                            <li>üí¨ Tham gia th·∫£o lu·∫≠n v·ªÅ s√°ch</li>
                            <li>‚≠ê ƒê√°nh gi√° v√† b√¨nh lu·∫≠n s√°ch</li>
                        </ul>
                    </div>
                    
                    <div style='text-align: center; margin: 30px 0;'>
                        <a href='#' 
                           style='background-color: #28a745; color: white; padding: 15px 30px; 
                                  text-decoration: none; border-radius: 5px; display: inline-block;'>
                            üöÄ B·∫Øt ƒë·∫ßu ƒë·ªçc ngay
                        </a>
                    </div>
                </div>
                
                <div style='text-align: center; margin-top: 30px;'>
                    <p style='color: #999; font-size: 12px;'>
                        ¬© 2024 Booklify. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
                    </p>
                </div>
            </body>
            </html>";
    }

    /// <summary>
    /// Validate email address format
    /// </summary>
    private static bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    #endregion
} 